// Site containers
@mixin site-wrap($size: null, $padding: true) {
	@include mkdo-clearfix;
	width: 100%;
	display: block;
	margin-left: auto;
	margin-right: auto;
	max-width: mkdo-rem($global--container-width);
	position: relative;
	@if $padding == true {
		padding-left: $global--gutter-width;
		padding-right: $global--gutter-width;
	}

	@if $size == 'normal' {
		max-width: $global--container-width;
	}

	@if $size == 'narrow' {
		max-width: 900px;
	}

	@if $size == 'readability' {
		max-width: $global--container-readability;
	}
}

// Column spacing
@mixin spacing($x: true, $y: true, $size: $global--gutter-width) {
	display: flex;
	flex-flow: row wrap;
	position: relative;
	@if $x {
		margin-right: -$size;
	}
	@if $y {
		margin-bottom: -$size;
	}

	> * {
		width: auto;
		@if $x {
			padding-right: $size;
		}
		@if $y {
			padding-bottom: $size;
		}
	}
}

/// Clearfix.
/// @group helpers
/// @example scss - Apply a clear to a row.
/// 	.row {
/// 		@include mkdo-clearfix();
/// 	}
@mixin mkdo-clearfix {
	*zoom: 1;

	&::before,
	&::after {
		content: ' ';
		display: table;
	}

	&::after {
		clear: both;
	}
}

// Trim margins
@mixin trim($type: margin, $depth: 1) {
	$first: '';
	$last: '';
	@for $i from 0 to $depth {
		$first: $first + ' > :first-child';
		$last: $last + ' > :last-child';

		#{$first} {
			#{$type}-top: 0;
		}

		#{$last} {
			#{$type}-bottom: 0;
		}
	}
}

/// Shorthand for element positioning.
/// @group helpers
/// @param {String} $type - Either absolute, fixed or relative
/// @param {Length} $top [null] - Top
/// @param {Length} $right [null] - Right
/// @param {Length} $bottom [null] - Bottom
/// @param {Length} $left [null] - Left
/// @example scss - Position an element to the top left of its parent.
/// 	.hamburger {
/// 		@include mkdo-abs-position('absolute', $top: 20px, $left: 20px);
/// 	}
@mixin mkdo-abs-position(
	$type,
	$top: null,
	$right: null,
	$bottom: null,
	$left: null
) {
	position: $type;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

/// Center block.
/// @group helpers
/// @example scss - Center an image.
/// 	img {
/// 		@include mkdo-center-block;
/// 	}
/// @example markup - Center an image
/// 	<div>
/// 		<img src="blue-sky.jpg" alt="Blue Sky"/>
/// 	</div>
@mixin mkdo-center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

/// Horizontally and vertically centers block elements.
/// @group helpers
/// @param {Bool} top ['50%'] - Override for the top position.
/// @example scss - Set the (modified) top position of a centered button.
/// 	.click-to-enter {
/// 		@include mkdo-center-both(45%);
/// 	}
@mixin mkdo-center-both($top: 50%) {
	left: 50%;
	position: absolute;
	top: $top;
	transform: translate(-50%, -50%);
}

/// Vertically center block elements.
/// @group helpers
/// @example scss - Vertically centre a search icon element, and make the parent relative.
/// 	.search-icon {
/// 		@include mkdo-center-vert();
/// 	}
@mixin mkdo-center-vert() {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

/// No horizontal margin.
/// @group helpers
/// @example scss - Remove horizontal margin.
/// 	.no-hmargin {
/// 		@include mkdo-no-hmargin();
/// 	}
@mixin mkdo-no-hmargin {
	margin-left: 0;
	margin-right: 0;
}

/// No horizontal padding.
/// @group helpers
/// @example scss - Remove horizontal padding.
/// 	.no-hpadding {
/// 		@include mkdo-no-hpadding();
/// 	}
@mixin mkdo-no-hpadding {
	padding-left: 0;
	padding-right: 0;
}

/// No vertical margin.
/// @group helpers
/// @example scss - Remove vertical margin.
/// 	.no-vmargin {
/// 		@include mkdo-no-vmargin();
/// 	}
@mixin mkdo-no-vmargin {
	margin-bottom: 0;
	margin-top: 0;
}

/// No vertical padding.
/// @group helpers
/// @example scss - Remove vertical padding.
/// 	.no-vpadding {
/// 		@include mkdo-no-vpadding();
/// 	}
@mixin mkdo-no-vpadding {
	padding-bottom: 0;
	padding-top: 0;
}
